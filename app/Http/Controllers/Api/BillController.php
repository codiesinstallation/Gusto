<?php
bolt_decrypt( __FILE__ , 'NZMHHr'); return 0;
##!!!##