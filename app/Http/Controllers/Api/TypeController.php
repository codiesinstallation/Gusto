<?php
bolt_decrypt( __FILE__ , 'yCTt0C'); return 0;
##!!!##